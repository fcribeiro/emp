---
swagger: "2.0"
info:
  version: "0.1"
  title: "EMP_Server_Controller"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /:
    get:
      tags:
      - "emp_server"
      summary: "EMP Working!"
      operationId: "application_hello_world"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
  /app:
    get:
      tags:
      - "emp_server"
      summary: "Gets general information about all applications"
      operationId: "application_get_all_apps"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/ArrayOfApps"
        400:
          description: "Bad request."
          schema:
            type: "string"
        404:
          description: "Not found."
          schema:
            type: "string"
        500:
          description: "Internal server error."
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
    post:
      tags:
      - "emp_server"
      summary: "Deploys an application in the platform"
      operationId: "application_deploy_app"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "app_deploy"
        description: "Application object to be deployed"
        required: true
        schema:
          $ref: "#/definitions/AppDeploy"
      responses:
        201:
          description: "Created."
          schema:
            $ref: "#/definitions/AppInfo"
        400:
          description: "Bad request."
          schema:
            type: "string"
        500:
          description: "Internal server error"
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
  /app/user:
    post:
      tags:
      - "emp_server"
      summary: "Creates a user with all the necessary information"
      operationId: "application_create_user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user_info"
        description: "User information"
        required: true
        schema:
          $ref: "#/definitions/UserInfo"
      responses:
        200:
          description: "User created successfully"
          schema:
            type: "string"
        400:
          description: "Bad request."
          schema:
            type: "string"
        404:
          description: "Not found."
          schema:
            type: "string"
        500:
          description: "Internal server error."
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
  /app/login:
    post:
      tags:
      - "emp_server"
      summary: "User login"
      operationId: "application_login_user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user_info"
        description: "User information"
        required: true
        schema:
          $ref: "#/definitions/UserInfo"
      responses:
        200:
          description: "Logged in successfully"
          schema:
            type: "string"
        400:
          description: "Bad request."
          schema:
            type: "string"
        401:
          description: "Login Failed."
          schema:
            type: "string"
        404:
          description: "Not found."
          schema:
            type: "string"
        500:
          description: "Internal server error."
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
  /app/{app_id}:
    get:
      tags:
      - "emp_server"
      summary: "Gets all information about a specific application"
      operationId: "application_get_app"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "app_id"
        in: "path"
        description: "ID of the application to get information"
        required: true
        type: "string"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/AppTotalInfo"
        400:
          description: "Bad request."
          schema:
            type: "string"
        404:
          description: "Not found."
          schema:
            type: "string"
        500:
          description: "Internal server error."
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
    delete:
      tags:
      - "emp_server"
      summary: "Removes an application from the platform"
      operationId: "application_delete_app"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "app_id"
        in: "path"
        description: "ID of the application to remove"
        required: true
        type: "string"
      responses:
        200:
          description: "OK."
          schema:
            type: "string"
        400:
          description: "Bad request."
          schema:
            type: "string"
        404:
          description: "Not found."
          schema:
            type: "string"
        500:
          description: "Internal server error."
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
    patch:
      tags:
      - "emp_server"
      summary: "Changes an application state"
      operationId: "application_change_app_state"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "app_id"
        in: "path"
        description: "ID of the application to change its state"
        required: true
        type: "string"
      - in: "body"
        name: "app_state"
        description: "Parameters that will change the state of the application"
        required: true
        schema:
          $ref: "#/definitions/AppState"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/AppInfo"
        400:
          description: "Bad request."
          schema:
            type: "string"
        404:
          description: "Not found."
          schema:
            type: "string"
        500:
          description: "Internal server error."
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
  /app/tracing/{app_id}:
    get:
      tags:
      - "emp_server"
      summary: "Gets tracing information about a specific application"
      operationId: "application_get_app_tracing"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "app_id"
        in: "path"
        description: "ID of the application"
        required: true
        type: "string"
      responses:
        200:
          description: "OK."
          schema:
            type: "string"
            example: "127.0.0.1:8080"
        400:
          description: "Bad request."
          schema:
            type: "string"
        404:
          description: "Not found."
          schema:
            type: "string"
        500:
          description: "Internal server error."
          schema:
            type: "string"
      x-swagger-router-controller: "swagger_server.controllers.emp_server_controller"
definitions:
  AppDeploy:
    type: "object"
    required:
    - "docker_image"
    - "envs"
    - "name"
    - "port"
    - "quality_metrics"
    - "stateless"
    properties:
      name:
        type: "string"
        example: "Songs Application"
        description: "Name of the application to be deployed"
      docker_image:
        type: "string"
        example: "fcribeiro/Songs_MS"
        description: "Name of the docker image"
      envs:
        type: "array"
        items:
          $ref: "#/definitions/EnvironmentVariables"
      stateless:
        type: "boolean"
        example: true
        description: "For stateless apps use true, stateful use false."
      port:
        type: "integer"
        example: 8080
        description: "Port number of the application"
      quality_metrics:
        type: "array"
        items:
          $ref: "#/definitions/QualityMetrics"
    example:
      quality_metrics:
      - metric: "metric"
        values: "values"
      - metric: "metric"
        values: "values"
      envs:
      - name: "KAFKAADDRESS"
      - value: "localhost:9092"
      name: "Songs Application"
      stateless: true
      docker_image: "fcribeiro/Songs_MS"
  AppTotalInfo:
    type: "object"
    required:
    - "docker_image"
    - "envs"
    - "external_ip"
    - "id"
    - "name"
    - "port"
    - "quality_metrics"
    - "replicas"
    - "state"
    - "stateless"
    properties:
      id:
        type: "string"
        example: "abcABC"
        description: "The application ID."
      name:
        type: "string"
        example: "Songs Application"
        description: "Name of the deployed application"
      state:
        type: "string"
        example: "Running"
        description: "Current state of the application"
      docker_image:
        type: "string"
        example: "fcribeiro/Songs_MS"
        description: "Name of the docker image"
      envs:
        type: "array"
        items:
          $ref: "#/definitions/EnvironmentVariables"
      stateless:
        type: "boolean"
        example: true
        description: "Stateless apps use true, stateful use false."
      quality_metrics:
        type: "array"
        items:
          $ref: "#/definitions/QualityMetrics"
      port:
        type: "integer"
        example: 8080
        description: "Port number of the application"
      replicas:
        type: "integer"
        example: 1
        description: "Number of replicas of an application"
      external_ip:
        type: "string"
        example: "1"
        description: "External IP of the application"
    example:
      quality_metrics:
      - metric: "metric"
        values: "values"
      - metric: "metric"
        values: "values"
      envs:
      - name: "KAFKAADDRESS"
      - value: "localhost:9092"
      name: "Songs Application"
      id: "abcABC"
      state: "Running"
      stateless: true
      docker_image: "fcribeiro/Songs_MS"
  AppInfo:
    type: "object"
    required:
    - "id"
    - "name"
    - "state"
    properties:
      id:
        type: "string"
        example: "abcABC"
        description: "The application ID."
      name:
        type: "string"
        example: "Songs Application"
        description: "Name of the deployed application"
      state:
        type: "string"
        example: "Stopped"
        description: "Current state of the application"
    example:
      name: "Songs Application"
      id: "abcABC"
      state: "Stopped"
  ArrayOfApps:
    type: "array"
    items:
      $ref: "#/definitions/AppInfo"
  QualityMetrics:
    type: "object"
    required:
    - "metric"
    - "values"
    properties:
      metric:
        type: "string"
        description: "Name of the quality metric"
      values:
        type: "string"
        description: "Values of the quality metric"
    example:
      metric: "metric"
      values: "values"
  EnvironmentVariables:
    type: "object"
    required:
    - "name"
    - "value"
    properties:
      name:
        type: "string"
        description: "Name of the environment variable"
      value:
        type: "string"
        description: "Value of the environment variable"
    example:
      name: "KAFKAADDRESS"
      value: "localhost:9092"
  AppState:
    type: "object"
    properties:
      state:
        type: "boolean"
      quality_metrics:
        type: "array"
        items:
          $ref: "#/definitions/QualityMetrics"
    example:
      quality_metrics:
      - metric: "metric"
        values: "values"
      - metric: "metric"
        values: "values"
      state: true
  UserInfo:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      username:
        type: "string"
        example: "fcribeiro"
        description: "Username of the user"
      password:
        type: "string"
        example: "ribeiro123"
        description: "Password of the user"
    example:
      password: "ribeiro123"
      username: "fcribeiro"
