# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.quality_metrics import QualityMetrics  # noqa: F401,E501
from swagger_server import util


class AppTotalInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, state: str=None, docker_image: str=None, stateless: bool=None, quality_metrics: List[QualityMetrics]=None):  # noqa: E501
        """AppTotalInfo - a model defined in Swagger

        :param id: The id of this AppTotalInfo.  # noqa: E501
        :type id: int
        :param name: The name of this AppTotalInfo.  # noqa: E501
        :type name: str
        :param state: The state of this AppTotalInfo.  # noqa: E501
        :type state: str
        :param docker_image: The docker_image of this AppTotalInfo.  # noqa: E501
        :type docker_image: str
        :param stateless: The stateless of this AppTotalInfo.  # noqa: E501
        :type stateless: bool
        :param quality_metrics: The quality_metrics of this AppTotalInfo.  # noqa: E501
        :type quality_metrics: List[QualityMetrics]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'state': str,
            'docker_image': str,
            'stateless': bool,
            'quality_metrics': List[QualityMetrics]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'state': 'state',
            'docker_image': 'docker_image',
            'stateless': 'stateless',
            'quality_metrics': 'quality_metrics'
        }

        self._id = id
        self._name = name
        self._state = state
        self._docker_image = docker_image
        self._stateless = stateless
        self._quality_metrics = quality_metrics

    @classmethod
    def from_dict(cls, dikt) -> 'AppTotalInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppTotalInfo of this AppTotalInfo.  # noqa: E501
        :rtype: AppTotalInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this AppTotalInfo.

        The application ID.  # noqa: E501

        :return: The id of this AppTotalInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this AppTotalInfo.

        The application ID.  # noqa: E501

        :param id: The id of this AppTotalInfo.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this AppTotalInfo.

        Name of the deployed application  # noqa: E501

        :return: The name of this AppTotalInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AppTotalInfo.

        Name of the deployed application  # noqa: E501

        :param name: The name of this AppTotalInfo.
        :type name: str
        """

        self._name = name

    @property
    def state(self) -> str:
        """Gets the state of this AppTotalInfo.

        Current state of the application  # noqa: E501

        :return: The state of this AppTotalInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this AppTotalInfo.

        Current state of the application  # noqa: E501

        :param state: The state of this AppTotalInfo.
        :type state: str
        """

        self._state = state

    @property
    def docker_image(self) -> str:
        """Gets the docker_image of this AppTotalInfo.

        Name of the docker image  # noqa: E501

        :return: The docker_image of this AppTotalInfo.
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image: str):
        """Sets the docker_image of this AppTotalInfo.

        Name of the docker image  # noqa: E501

        :param docker_image: The docker_image of this AppTotalInfo.
        :type docker_image: str
        """

        self._docker_image = docker_image

    @property
    def stateless(self) -> bool:
        """Gets the stateless of this AppTotalInfo.

        Stateless apps use true, stateful use false.  # noqa: E501

        :return: The stateless of this AppTotalInfo.
        :rtype: bool
        """
        return self._stateless

    @stateless.setter
    def stateless(self, stateless: bool):
        """Sets the stateless of this AppTotalInfo.

        Stateless apps use true, stateful use false.  # noqa: E501

        :param stateless: The stateless of this AppTotalInfo.
        :type stateless: bool
        """

        self._stateless = stateless

    @property
    def quality_metrics(self) -> List[QualityMetrics]:
        """Gets the quality_metrics of this AppTotalInfo.


        :return: The quality_metrics of this AppTotalInfo.
        :rtype: List[QualityMetrics]
        """
        return self._quality_metrics

    @quality_metrics.setter
    def quality_metrics(self, quality_metrics: List[QualityMetrics]):
        """Sets the quality_metrics of this AppTotalInfo.


        :param quality_metrics: The quality_metrics of this AppTotalInfo.
        :type quality_metrics: List[QualityMetrics]
        """

        self._quality_metrics = quality_metrics
