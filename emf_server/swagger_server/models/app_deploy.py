# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.quality_metrics import QualityMetrics  # noqa: F401,E501
from swagger_server import util


class AppDeploy(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, docker_image: str=None, quality_metrics: List[QualityMetrics]=None):  # noqa: E501
        """AppDeploy - a model defined in Swagger

        :param name: The name of this AppDeploy.  # noqa: E501
        :type name: str
        :param docker_image: The docker_image of this AppDeploy.  # noqa: E501
        :type docker_image: str
        :param quality_metrics: The quality_metrics of this AppDeploy.  # noqa: E501
        :type quality_metrics: List[QualityMetrics]
        """
        self.swagger_types = {
            'name': str,
            'docker_image': str,
            'quality_metrics': List[QualityMetrics]
        }

        self.attribute_map = {
            'name': 'name',
            'docker_image': 'docker_image',
            'quality_metrics': 'quality_metrics'
        }

        self._name = name
        self._docker_image = docker_image
        self._quality_metrics = quality_metrics

    @classmethod
    def from_dict(cls, dikt) -> 'AppDeploy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppDeploy of this AppDeploy.  # noqa: E501
        :rtype: AppDeploy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AppDeploy.

        Name of the application to be deployed  # noqa: E501

        :return: The name of this AppDeploy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AppDeploy.

        Name of the application to be deployed  # noqa: E501

        :param name: The name of this AppDeploy.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def docker_image(self) -> str:
        """Gets the docker_image of this AppDeploy.

        Name of the docker image  # noqa: E501

        :return: The docker_image of this AppDeploy.
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image: str):
        """Sets the docker_image of this AppDeploy.

        Name of the docker image  # noqa: E501

        :param docker_image: The docker_image of this AppDeploy.
        :type docker_image: str
        """
        if docker_image is None:
            raise ValueError("Invalid value for `docker_image`, must not be `None`")  # noqa: E501

        self._docker_image = docker_image

    @property
    def quality_metrics(self) -> List[QualityMetrics]:
        """Gets the quality_metrics of this AppDeploy.


        :return: The quality_metrics of this AppDeploy.
        :rtype: List[QualityMetrics]
        """
        return self._quality_metrics

    @quality_metrics.setter
    def quality_metrics(self, quality_metrics: List[QualityMetrics]):
        """Sets the quality_metrics of this AppDeploy.


        :param quality_metrics: The quality_metrics of this AppDeploy.
        :type quality_metrics: List[QualityMetrics]
        """
        if quality_metrics is None:
            raise ValueError("Invalid value for `quality_metrics`, must not be `None`")  # noqa: E501

        self._quality_metrics = quality_metrics
