# coding: utf-8

"""
    EMP_Server_Controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.quality_metrics import QualityMetrics  # noqa: F401,E501


class AppDeploy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'docker_image': 'str',
        'stateless': 'bool',
        'quality_metrics': 'list[QualityMetrics]'
    }

    attribute_map = {
        'name': 'name',
        'docker_image': 'docker_image',
        'stateless': 'stateless',
        'quality_metrics': 'quality_metrics'
    }

    def __init__(self, name=None, docker_image=None, stateless=None, quality_metrics=None):  # noqa: E501
        """AppDeploy - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._docker_image = None
        self._stateless = None
        self._quality_metrics = None
        self.discriminator = None

        self.name = name
        self.docker_image = docker_image
        self.stateless = stateless
        self.quality_metrics = quality_metrics

    @property
    def name(self):
        """Gets the name of this AppDeploy.  # noqa: E501

        Name of the application to be deployed  # noqa: E501

        :return: The name of this AppDeploy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppDeploy.

        Name of the application to be deployed  # noqa: E501

        :param name: The name of this AppDeploy.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def docker_image(self):
        """Gets the docker_image of this AppDeploy.  # noqa: E501

        Name of the docker image  # noqa: E501

        :return: The docker_image of this AppDeploy.  # noqa: E501
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """Sets the docker_image of this AppDeploy.

        Name of the docker image  # noqa: E501

        :param docker_image: The docker_image of this AppDeploy.  # noqa: E501
        :type: str
        """
        if docker_image is None:
            raise ValueError("Invalid value for `docker_image`, must not be `None`")  # noqa: E501

        self._docker_image = docker_image

    @property
    def stateless(self):
        """Gets the stateless of this AppDeploy.  # noqa: E501

        For stateless apps use true, stateful use false.  # noqa: E501

        :return: The stateless of this AppDeploy.  # noqa: E501
        :rtype: bool
        """
        return self._stateless

    @stateless.setter
    def stateless(self, stateless):
        """Sets the stateless of this AppDeploy.

        For stateless apps use true, stateful use false.  # noqa: E501

        :param stateless: The stateless of this AppDeploy.  # noqa: E501
        :type: bool
        """
        if stateless is None:
            raise ValueError("Invalid value for `stateless`, must not be `None`")  # noqa: E501

        self._stateless = stateless

    @property
    def quality_metrics(self):
        """Gets the quality_metrics of this AppDeploy.  # noqa: E501


        :return: The quality_metrics of this AppDeploy.  # noqa: E501
        :rtype: list[QualityMetrics]
        """
        return self._quality_metrics

    @quality_metrics.setter
    def quality_metrics(self, quality_metrics):
        """Sets the quality_metrics of this AppDeploy.


        :param quality_metrics: The quality_metrics of this AppDeploy.  # noqa: E501
        :type: list[QualityMetrics]
        """
        if quality_metrics is None:
            raise ValueError("Invalid value for `quality_metrics`, must not be `None`")  # noqa: E501

        self._quality_metrics = quality_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppDeploy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
